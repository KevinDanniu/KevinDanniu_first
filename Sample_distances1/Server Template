####Set workplace####
rm(list = ls())
gc()

####Library R packages####
library(DESeq2)
library(dplyr)
library(ggplot2)

####Pre-process And PCA analysis####
#----Upload file----#
dds <- readRDS("C:/Users/Kevin丶大牛/Desktop/trim_result/trim_result/tximeta_DESeqDataSeq_Raw_Filtered.Rds")
#I feel the dds's design have a problem.
# dds@design <- "~ cell + treat"
countdata <- round(assays(dds)[["counts"]])
head(countdata, 3)

#----Pre-filter dataset----#
#A count at least 10 for a minimal number of sample
smallestGroupSize <- 4
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
nrow(dds)
dds <- dds[keep,]
nrow(dds)
#Before performing PCA, we must normalize dataset.
#Because highest counts will make result depends mostly on them.
#Logarithm-trasformed count
#For genes with higher counts, log2 give the similar result to the VST and the rlong
#But for lower counts, the VST and rlog become approximately homoskedastic (more flat frend in the meanSdPlot)
#The VST is much faster to compute and is less sensitive to high count outliers than the rlog.
#The rlog tends to work well on small datasets (n < 30), potentially outperforming the VST when there is a wide range of sequencing depth across samples (an order of magnitude difference).
#estimateSizeFactors() observes the distribution of the number of RNA segments,
#and estimate size factors for each sample. Using these factors, we can adjust the gene expression in each sample.
library(vsn)
vsd <- vst(dds, blind = FALSE)
rld <- rlog(dds, blind = FALSE)
dds <- estimateSizeFactors(dds)
df <- bind_rows(
  as_data_frame(log2(counts(dds, normalized = TRUE) + 1)) %>% mutate(transformation = "log2(x + 1)"),
  as_data_frame(assay(vsd)) %>% mutate(transformation = "vst"),
  as_data_frame(assay(rld)) %>% mutate(transformation = "rlog")
)
lvls <- c("log2(x + 1)", "vst", "rlog")
df$transformation <- factor(df$transformation, levels=lvls)
ggplot(df, aes(x = AA1, y = IA1)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid( . ~ transformation)
ggplot(df, aes(x = AA1, y = IA1)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid( . ~ transformation)
vstdata <- as.data.frame(subset(df, transformation == "vst"))
vstdata <- as.matrix(vstdata[,-28])
rownames(vstdata) <- as.data.frame(rowData(dds))[,1]
rlogdata <- as.data.frame(subset(df, transformation == "rlog"))
rlogdata <- as.matrix(rlogdata[,-28])
rownames(rlogdata) <- as.data.frame(rowData(dds))[,1]
logdata <- as.data.frame(subset(df, transformation == "log2(x + 1)"))
logdata <- as.matrix(logdata[,-28])
rownames(logdata) <- as.data.frame(rowData(dds))[,1]
meanSdPlot(countdata, ranks = FALSE)
meanSdPlot(vstdata, ranks = FALSE)
meanSdPlot(rlogdata, ranks = FALSE)
meanSdPlot(logdata, ranks = FALSE)
#We can see how genes with low counts (bottom left-hand corner) seem to be excessively variable on the ordinary logarithmic scale,
#while the VST and rlog compress differences for the low count genes for which the data provide little information about differential expression.

#----sample distances----#
#Calculate the Euclidean distance between samples.
sampleDists <- dist(t(assay(vsd)))
sampleDists
sampleDistMatrix <- as.matrix(sampleDists)
library(pheatmap)#无法与shiny交互
library(heatmaply)#无法调整热图大小
#默认的heatmap不方便调整legend
library(ComplexHeatmap)#还未尝试
library(RColorBrewer)
annotation_row <- data.frame(group = as.character(vsd$treat))
rownames(annotation_row) <- vsd$names
annotation_col <- data.frame(group = as.character(vsd$treat))
rownames(annotation_col) <- vsd$names
ann_colors <- brewer.pal(9,"PiYG")
names(ann_colors) <- levels(vsd$treat)
ann_colors <- list(group = ann_colors)
#We manually provide sampleDists to the clustering_distance argument of the pheatmap function.
#Otherwise the pheatmap function would assume that the matrix contains the data values themselves, and would calculate distances between the rows/columns of the distance matrix, which is not desired.
pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         col = colorRampPalette(rev(brewer.pal(9, "Blues")))(255),
         annotation_row = annotation_row,
         annotation_col = annotation_col,
         annotation_colors = ann_colors)
ann_colors <- brewer.pal(11,"PiYG")
names(ann_colors) <- levels(vsd$treat)
ann_colors <- list(Group = ann_colors)
ann_colors$Group <- ann_colors$Group[!is.na(names(ann_colors$Group))]
ann_col <- data.frame(Group = as.character(vsd$treat))
ann_col <- HeatmapAnnotation(df = ann_col,
                             col = ann_colors,
                             show_legend = FALSE)
ann_row <- data.frame(Group = as.character(vsd$treat))
ann_row <- rowAnnotation(df = ann_row,
                         col = ann_colors)
Heatmap(sampleDistMatrix,
        clustering_distance_rows = sampleDists,
        clustering_distance_columns = sampleDists,
        top_annotation = ann_col,
        right_annotation = ann_row)
ann_colors <- brewer.pal(9,"PiYG")
ann_row <- ann_colors[vsd$treat]
ann_col <- ann_colors[vsd$treat]
heatmap(sampleDistMatrix,
        Rowv = sampleDists,
        Colv = sampleDists,
        RowSideColors = ann_row,
        ColSideColors = ann_col,
        scale = "none")
legend(inset = c(0,0,0,0), "topright",
       legend = unique(names(ann_row)), fill = ann_row[unique(names(ann_row))])
ann_colors <- brewer.pal(9,"PiYG")
ann_row <- ann_colors[as.factor(vsd$treat)]
ann_col <- ann_colors[as.factor(vsd$treat)]
hm <- heatmaply(sampleDistMatrix,
          col = colorRampPalette(c("navy","white","firebrick3"))(100),
          RowSideColors = ann_row,
          ColSideColors = ann_col,
          column_title = NULL,
          Rowv = sampleDists,
          Colv = sampleDists)
hm$width <- 800
hm$width
hm$height <- 600
hm
#Calculate Poisson distance between the samples.
#This measure of dissimilarity between counts also takes the inherent variance structure of counts into consideration when calculating the distances between samples.
library(PoiClaClu)
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix(poisd$dd)
rownames(samplePoisDistMatrix) <- dds$names
colnames(samplePoisDistMatrix) <- dds$names
annotation_row <- data.frame(group = as.character(dds$treat))
rownames(annotation_row) <- dds$names
annotation_col <- data.frame(group = as.character(dds$treat))
rownames(annotation_col) <- dds$names
ann_colors <- brewer.pal(9,"PiYG")
names(ann_colors) <- levels(vsd$treat)
ann_colors <- list(group = ann_colors)
pheatmap(samplePoisDistMatrix,
         clustering_distance_rows = poisd$dd,
         clustering_distance_cols = poisd$dd,
         col = colorRampPalette(rev(brewer.pal(9, "Blues")))(255),
         annotation_row = annotation_row,
         annotation_col = annotation_col,
         annotation_colors = ann_colors)
